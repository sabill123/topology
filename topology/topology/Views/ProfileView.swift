import SwiftUI

struct ProfileView: View {
    @StateObject private var viewModel = FriendsViewModel()
    @StateObject private var authManager = AuthManager.shared
    @State private var isEditMode = false
    @State private var showImagePicker = false
    @State private var showSettings = false
    @State private var showLogoutAlert = false
    @State private var showNotificationSettings = false
    @State private var showPrivacySettings = false
    @State private var showHelpCenter = false
    @State private var showContactUs = false
    @State private var showTermsOfService = false
    @State private var userProfile: User?
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // ÌîÑÎ°úÌïÑ Ìó§Îçî
                    ProfileHeaderView(
                        user: userProfile ?? authManager.currentUser,
                        isEditMode: $isEditMode,
                        showImagePicker: $showImagePicker
                    )
                    
                    // ÌîÑÎ°úÌïÑ ÌÜµÍ≥Ñ
                    ProfileStatsView(viewModel: viewModel)
                    
                    // Î©îÎâ¥ ÏòµÏÖòÎì§
                    VStack(spacing: 0) {
                        MenuSection(title: "Í≥ÑÏ†ï") {
                            VStack(spacing: 0) {
                                ProfileMenuItem(
                                    icon: "person.fill",
                                    title: "ÎÇ¥ Ï†ïÎ≥¥ ÏàòÏ†ï",
                                    action: { isEditMode = true }
                                )
                                
                                ProfileMenuItem(
                                    icon: "bell.fill",
                                    title: "ÏïåÎ¶º ÏÑ§Ï†ï",
                                    action: { showNotificationSettings = true }
                                )
                                
                                ProfileMenuItem(
                                    icon: "lock.fill",
                                    title: "ÌîÑÎùºÏù¥Î≤ÑÏãú",
                                    action: { showPrivacySettings = true }
                                )
                            }
                        }
                        
                        MenuSection(title: "ÌôúÎèô") {
                            VStack(spacing: 0) {
                                NavigationLink(destination: MyItemsView(viewModel: viewModel)) {
                                    ProfileMenuItem(
                                        icon: "bag.fill",
                                        title: "ÎÇ¥ ÏïÑÏù¥ÌÖú",
                                        showChevron: true
                                    )
                                }
                                .buttonStyle(PlainButtonStyle())
                                
                                NavigationLink(destination: PurchaseHistoryView(viewModel: viewModel)) {
                                    ProfileMenuItem(
                                        icon: "clock.fill",
                                        title: "Íµ¨Îß§ ÎÇ¥Ïó≠",
                                        showChevron: true
                                    )
                                }
                                .buttonStyle(PlainButtonStyle())
                                
                                NavigationLink(destination: PointHistoryView(viewModel: viewModel)) {
                                    ProfileMenuItem(
                                        icon: "diamond.fill",
                                        title: "Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠",
                                        showChevron: true
                                    )
                                }
                                .buttonStyle(PlainButtonStyle())
                            }
                        }
                        
                        MenuSection(title: "ÏßÄÏõê") {
                            VStack(spacing: 0) {
                                ProfileMenuItem(
                                    icon: "questionmark.circle.fill",
                                    title: "ÎèÑÏõÄÎßê",
                                    action: { showHelpCenter = true }
                                )
                                
                                ProfileMenuItem(
                                    icon: "envelope.fill",
                                    title: "Î¨∏ÏùòÌïòÍ∏∞",
                                    action: { showContactUs = true }
                                )
                                
                                ProfileMenuItem(
                                    icon: "doc.text.fill",
                                    title: "Ïù¥Ïö©ÏïΩÍ¥Ä",
                                    action: { showTermsOfService = true }
                                )
                            }
                        }
                        
                        MenuSection(title: "") {
                            VStack(spacing: 0) {
                                ProfileMenuItem(
                                    icon: "arrow.right.square.fill",
                                    title: "Î°úÍ∑∏ÏïÑÏõÉ",
                                    titleColor: .red,
                                    action: { showLogoutAlert = true }
                                )
                            }
                        }
                    }
                }
                .padding(.bottom, 30)
            }
            .navigationTitle("ÌîÑÎ°úÌïÑ")
            .navigationBarItems(trailing: Button(action: {
                showSettings = true
            }) {
                Image(systemName: "gearshape.fill")
                    .foregroundColor(.gray)
            })
            .sheet(isPresented: $isEditMode) {
                ProfileEditView(user: userProfile ?? authManager.currentUser, onSave: { updatedUser in
                    userProfile = updatedUser
                })
            }
            .sheet(isPresented: $showSettings) {
                SettingsView()
            }
            .sheet(isPresented: $showNotificationSettings) {
                NotificationSettingsView()
            }
            .sheet(isPresented: $showPrivacySettings) {
                PrivacySettingsView()
            }
            .sheet(isPresented: $showHelpCenter) {
                HelpCenterView()
            }
            .sheet(isPresented: $showContactUs) {
                ContactUsView()
            }
            .sheet(isPresented: $showTermsOfService) {
                TermsOfServiceView()
            }
            .alert(isPresented: $showLogoutAlert) {
                Alert(
                    title: Text("Î°úÍ∑∏ÏïÑÏõÉ"),
                    message: Text("Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?"),
                    primaryButton: .destructive(Text("Î°úÍ∑∏ÏïÑÏõÉ")) {
                        authManager.signOut()
                    },
                    secondaryButton: .cancel(Text("Ï∑®ÏÜå"))
                )
            }
            .onAppear {
                loadUserProfile()
            }
        }
    }
    
    private func loadUserProfile() {
        Task {
            do {
                if let currentUser = authManager.currentUser {
                    userProfile = currentUser
                } else {
                    // If no cached user, try to fetch from server
                    let user = try await AuthService.shared.getCurrentUser()
                    await MainActor.run {
                        userProfile = user
                    }
                }
            } catch {
                print("Failed to load user profile: \(error)")
            }
        }
    }
}

// ÌîÑÎ°úÌïÑ Ìó§Îçî
struct ProfileHeaderView: View {
    let user: User?
    @Binding var isEditMode: Bool
    @Binding var showImagePicker: Bool
    
    var body: some View {
        VStack(spacing: 16) {
            // ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
            ZStack(alignment: .bottomTrailing) {
                if let profileImageUrl = user?.profileImageUrl, !profileImageUrl.isEmpty {
                    // TODO: AsyncImage for profile photo
                    Circle()
                        .fill(Color.gray.opacity(0.3))
                        .frame(width: 120, height: 120)
                        .overlay(
                            Text(String(user?.displayName.first ?? "?"))
                                .font(.system(size: 60))
                        )
                } else {
                    Circle()
                        .fill(Color.gray.opacity(0.3))
                        .frame(width: 120, height: 120)
                        .overlay(
                            Text("üë§")
                                .font(.system(size: 60))
                        )
                }
                
                Button(action: {
                    showImagePicker = true
                }) {
                    Image(systemName: "camera.fill")
                        .foregroundColor(.white)
                        .padding(8)
                        .background(Color.green)
                        .clipShape(Circle())
                }
                .offset(x: -5, y: -5)
            }
            
            // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
            VStack(spacing: 8) {
                Text(user?.displayName ?? "ÏÇ¨Ïö©Ïûê")
                    .font(.title2)
                    .fontWeight(.bold)
                
                HStack {
                    if let age = user?.age, let gender = user?.gender {
                        Text("\(age)ÏÑ∏ ‚Ä¢ \(gender)")
                            .foregroundColor(.gray)
                    }
                    
                    if let country = user?.country {
                        Text("‚Ä¢")
                            .foregroundColor(.gray)
                        
                        Text(country)
                            .foregroundColor(.gray)
                    }
                }
                
                if let bio = user?.bio, !bio.isEmpty {
                    Text(bio)
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal, 40)
                }
            }
            
            // ÌîÑÎ°úÌïÑ Ìé∏Ïßë Î≤ÑÌäº
            Button(action: {
                isEditMode = true
            }) {
                Text("ÌîÑÎ°úÌïÑ Ìé∏Ïßë")
                    .foregroundColor(.white)
                    .padding(.horizontal, 30)
                    .padding(.vertical, 10)
                    .background(Color.gray.opacity(0.3))
                    .cornerRadius(20)
            }
        }
        .padding(.vertical, 20)
    }
}

// ÌîÑÎ°úÌïÑ ÌÜµÍ≥Ñ
struct ProfileStatsView: View {
    @ObservedObject var viewModel: FriendsViewModel
    
    var body: some View {
        HStack(spacing: 0) {
            StatItem(title: "ÏπúÍµ¨", value: "\(viewModel.friends.count)")
            
            Divider()
                .frame(height: 50)
                .background(Color.gray.opacity(0.3))
            
            StatItem(title: "Î≥¥ÏÑù", value: "\(viewModel.myGems)")
            
            Divider()
                .frame(height: 50)
                .background(Color.gray.opacity(0.3))
            
            StatItem(title: "ÌÜµÌôî ÌöüÏàò", value: "\(viewModel.callRecords.count)")
        }
        .padding()
        .background(Color.black.opacity(0.2))
        .cornerRadius(12)
        .padding(.horizontal)
    }
}

// ÌÜµÍ≥Ñ ÏïÑÏù¥ÌÖú
struct StatItem: View {
    let title: String
    let value: String
    
    var body: some View {
        VStack(spacing: 4) {
            Text(value)
                .font(.headline)
            Text(title)
                .font(.caption)
                .foregroundColor(.gray)
        }
        .frame(maxWidth: .infinity)
    }
}

// Î©îÎâ¥ ÏÑπÏÖò
struct MenuSection<Content: View>: View {
    let title: String
    let content: () -> Content
    
    var body: some View {
        VStack(spacing: 0) {
            if !title.isEmpty {
                HStack {
                    Text(title)
                        .font(.caption)
                        .foregroundColor(.gray)
                        .textCase(.uppercase)
                    Spacer()
                }
                .padding(.horizontal)
                .padding(.top, 20)
                .padding(.bottom, 8)
            }
            
            VStack(spacing: 0) {
                content()
            }
            .background(Color.black.opacity(0.2))
            .cornerRadius(12)
            .padding(.horizontal)
        }
    }
}

// ÌîÑÎ°úÌïÑ Î©îÎâ¥ ÏïÑÏù¥ÌÖú
struct ProfileMenuItem: View {
    let icon: String
    let title: String
    var titleColor: Color = .white
    var showChevron: Bool = false
    var action: (() -> Void)? = nil
    
    var body: some View {
        Button(action: {
            action?()
        }) {
            HStack {
                Image(systemName: icon)
                    .foregroundColor(titleColor == .red ? .red : .gray)
                    .frame(width: 30)
                
                Text(title)
                    .foregroundColor(titleColor)
                
                Spacer()
                
                if showChevron {
                    Image(systemName: "chevron.right")
                        .foregroundColor(.gray)
                        .font(.system(size: 14))
                }
            }
            .padding()
        }
    }
}

// ÌîÑÎ°úÌïÑ Ìé∏Ïßë Î∑∞
struct ProfileEditView: View {
    let user: User?
    let onSave: (User) -> Void
    @Environment(\.presentationMode) var presentationMode
    
    @State private var displayName: String = ""
    @State private var bio: String = ""
    @State private var age: String = ""
    @State private var selectedGender: String = "male"
    @State private var country: String = ""
    @State private var preferredGender: String = "all"
    @State private var preferredAgeMin: String = "18"
    @State private var preferredAgeMax: String = "100"
    @State private var isProfilePublic: Bool = true
    @State private var allowRandomCalls: Bool = true
    @State private var isLoading = false
    @State private var errorMessage: String?
    
    let genders = ["male", "female", "other", "prefer_not_to_say"]
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Í∏∞Î≥∏ Ï†ïÎ≥¥")) {
                    TextField("ÌëúÏãú Ïù¥Î¶Ñ", text: $displayName)
                    TextField("ÏÜåÍ∞ú", text: $bio)
                    TextField("ÎÇòÏù¥", text: $age)
                        .keyboardType(.numberPad)
                    
                    Picker("ÏÑ±Î≥Ñ", selection: $selectedGender) {
                        Text("ÎÇ®ÏÑ±").tag("male")
                        Text("Ïó¨ÏÑ±").tag("female")
                        Text("Í∏∞ÌÉÄ").tag("other")
                        Text("Î∞ùÌûàÏßÄ ÏïäÏùå").tag("prefer_not_to_say")
                    }
                    
                    TextField("Íµ≠Í∞Ä", text: $country)
                }
                
                Section(header: Text("ÌîÑÎùºÏù¥Î≤ÑÏãú")) {
                    Toggle("ÌîÑÎ°úÌïÑ Í≥µÍ∞ú", isOn: $isProfilePublic)
                    Toggle("ÎûúÎç§ ÌÜµÌôî ÌóàÏö©", isOn: $allowRandomCalls)
                }
                
                Section(header: Text("ÏÑ†Ìò∏ ÏÑ§Ï†ï")) {
                    Picker("ÏÑ†Ìò∏ ÏÑ±Î≥Ñ", selection: $preferredGender) {
                        Text("Î™®Îëê").tag("all")
                        Text("ÎÇ®ÏÑ±").tag("male")
                        Text("Ïó¨ÏÑ±").tag("female")
                    }
                    
                    HStack {
                        Text("ÏÑ†Ìò∏ ÎÇòÏù¥")
                        Spacer()
                        TextField("ÏµúÏÜå", text: $preferredAgeMin)
                            .frame(width: 50)
                            .keyboardType(.numberPad)
                        Text("-")
                        TextField("ÏµúÎåÄ", text: $preferredAgeMax)
                            .frame(width: 50)
                            .keyboardType(.numberPad)
                        Text("ÏÑ∏")
                    }
                }
                
                if let errorMessage = errorMessage {
                    Section {
                        Text(errorMessage)
                            .foregroundColor(.red)
                    }
                }
            }
            .navigationTitle("ÌîÑÎ°úÌïÑ Ìé∏Ïßë")
            .navigationBarItems(
                leading: Button("Ï∑®ÏÜå") {
                    presentationMode.wrappedValue.dismiss()
                },
                trailing: Button("Ï†ÄÏû•") {
                    saveProfile()
                }
                .disabled(isLoading)
            )
            .onAppear {
                loadProfile()
            }
        }
    }
    
    func loadProfile() {
        if let user = user {
            displayName = user.displayName
            bio = user.bio ?? ""
            age = String(user.age ?? 18)
            selectedGender = user.gender ?? "prefer_not_to_say"
            country = user.country ?? ""
            preferredGender = "" // TODO: Add preferred gender to User model
            preferredAgeMin = String(user.preferredAgeMin ?? 18)
            preferredAgeMax = String(user.preferredAgeMax ?? 100)
            isProfilePublic = user.isProfilePublic ?? true
            allowRandomCalls = user.allowRandomCalls ?? true
        }
    }
    
    func saveProfile() {
        isLoading = true
        errorMessage = nil
        
        Task {
            do {
                // TODO: Implement user update API call
                // let updatedUser = try await UserService.shared.updateProfile(...)
                
                // For now, just create a new user object with updated values
                var updatedUser = user ?? User(
                    id: UUID().uuidString,
                    email: "",
                    username: "",
                    displayName: displayName,
                    age: Int(age),
                    gender: selectedGender,
                    country: country,
                    bio: bio.isEmpty ? nil : bio,
                    interests: nil,
                    profileImageUrl: nil,
                    photos: nil,
                    location: nil,
                    status: nil,
                    accountType: nil,
                    role: nil,
                    gems: nil,
                    lastSeen: nil,
                    isVerified: nil,
                    isActive: nil,
                    createdAt: Date(),
                    updatedAt: nil,
                    preferredGender: preferredGender.isEmpty ? nil : preferredGender,
                    preferredAgeMin: Int(preferredAgeMin),
                    preferredAgeMax: Int(preferredAgeMax),
                    isProfilePublic: isProfilePublic,
                    allowRandomCalls: allowRandomCalls
                )
                
                await MainActor.run {
                    onSave(updatedUser)
                    presentationMode.wrappedValue.dismiss()
                }
            } catch {
                await MainActor.run {
                    errorMessage = error.localizedDescription
                    isLoading = false
                }
            }
        }
    }
}

// ÎÇ¥ ÏïÑÏù¥ÌÖú Î∑∞
struct MyItemsView: View {
    @ObservedObject var viewModel: FriendsViewModel
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                if viewModel.ownedItems.isEmpty {
                    VStack(spacing: 16) {
                        Spacer()
                        
                        Image(systemName: "bag.slash")
                            .font(.system(size: 60))
                            .foregroundColor(.gray)
                        
                        Text("Î≥¥Ïú†Ìïú ÏïÑÏù¥ÌÖúÏù¥ ÏóÜÏäµÎãàÎã§")
                            .foregroundColor(.gray)
                        
                        NavigationLink(destination: GemStoreView(viewModel: viewModel)) {
                            Text("ÏÉÅÏ†ê Í∞ÄÍ∏∞")
                                .foregroundColor(.white)
                                .padding(.horizontal, 30)
                                .padding(.vertical, 10)
                                .background(Color.green)
                                .cornerRadius(20)
                        }
                        
                        Spacer()
                    }
                    .frame(minHeight: 300)
                } else {
                    ForEach(StoreCategory.allCases, id: \.self) { category in
                        let items = viewModel.ownedItems.filter { $0.category == category }
                        if !items.isEmpty {
                            VStack(alignment: .leading) {
                                Text(categoryTitle(for: category))
                                    .font(.headline)
                                    .padding(.horizontal)
                                
                                ScrollView(.horizontal, showsIndicators: false) {
                                    HStack(spacing: 16) {
                                        ForEach(items) { item in
                                            ItemCard(item: item)
                                        }
                                    }
                                    .padding(.horizontal)
                                }
                            }
                        }
                    }
                }
            }
            .padding(.vertical)
        }
        .navigationTitle("ÎÇ¥ ÏïÑÏù¥ÌÖú")
    }
    
    func categoryTitle(for category: StoreCategory) -> String {
        switch category {
        case .filter: return "ÌïÑÌÑ∞"
        case .gift: return "ÏÑ†Î¨º"
        case .vip: return "VIP"
        case .gems: return "Î≥¥ÏÑù"
        }
    }
}

// Íµ¨Îß§ ÎÇ¥Ïó≠ Î∑∞
struct PurchaseHistoryView: View {
    @ObservedObject var viewModel: FriendsViewModel
    
    var body: some View {
        Text("Íµ¨Îß§ ÎÇ¥Ïó≠")
            .navigationTitle("Íµ¨Îß§ ÎÇ¥Ïó≠")
    }
}

// Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ Î∑∞
struct PointHistoryView: View {
    @ObservedObject var viewModel: FriendsViewModel
    
    var body: some View {
        Text("Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠")
            .navigationTitle("Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠")
    }
}

// ÏÑ§Ï†ï Î∑∞
struct SettingsView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var notificationSettings = NotificationSettings()
    @State private var privacySettings = PrivacySettings()
    @State private var showPasswordChange = false
    @State private var show2FASettings = false
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("ÏïåÎ¶º ÏÑ§Ï†ï")) {
                    Toggle("Ìë∏Ïãú ÏïåÎ¶º", isOn: $notificationSettings.pushEnabled)
                    Toggle("ÏπúÍµ¨ ÏöîÏ≤≠ ÏïåÎ¶º", isOn: $notificationSettings.friendRequestsEnabled)
                    Toggle("Î©îÏãúÏßÄ ÏïåÎ¶º", isOn: $notificationSettings.messagesEnabled)
                    Toggle("ÌÜµÌôî ÏïåÎ¶º", isOn: $notificationSettings.callsEnabled)
                }
                
                Section(header: Text("ÌîÑÎùºÏù¥Î≤ÑÏãú")) {
                    Toggle("Ïò®ÎùºÏù∏ ÏÉÅÌÉú ÌëúÏãú", isOn: $privacySettings.showOnlineStatus)
                    Toggle("ÏùΩÏùå ÌôïÏù∏ ÌëúÏãú", isOn: $privacySettings.showReadReceipts)
                    Toggle("ÏúÑÏπò Í≥µÏú†", isOn: $privacySettings.shareLocation)
                }
                
                Section(header: Text("Î≥¥Ïïà")) {
                    Button(action: {
                        showPasswordChange = true
                    }) {
                        HStack {
                            Text("ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω")
                            Spacer()
                            Image(systemName: "chevron.right")
                                .foregroundColor(.gray)
                        }
                    }
                    
                    Button(action: {
                        show2FASettings = true
                    }) {
                        HStack {
                            Text("2Îã®Í≥Ñ Ïù∏Ï¶ù")
                            Spacer()
                            Text(privacySettings.twoFactorEnabled ? "ÏÇ¨Ïö© Ï§ë" : "ÏÇ¨Ïö© Ïïà Ìï®")
                                .foregroundColor(.gray)
                            Image(systemName: "chevron.right")
                                .foregroundColor(.gray)
                        }
                    }
                }
                
                Section(header: Text("Í∏∞ÌÉÄ")) {
                    Button(action: {
                        // Clear cache
                    }) {
                        HStack {
                            Text("Ï∫êÏãú ÏÇ≠Ï†ú")
                            Spacer()
                            Text("125 MB")
                                .foregroundColor(.gray)
                        }
                    }
                    
                    HStack {
                        Text("Î≤ÑÏ†Ñ")
                        Spacer()
                        Text("1.0.0")
                            .foregroundColor(.gray)
                    }
                }
            }
            .navigationTitle("ÏÑ§Ï†ï")
            .navigationBarItems(trailing: Button("ÏôÑÎ£å") {
                presentationMode.wrappedValue.dismiss()
            })
            .sheet(isPresented: $showPasswordChange) {
                PasswordChangeView()
            }
            .sheet(isPresented: $show2FASettings) {
                TwoFactorSettingsView()
            }
        }
    }
}

// ÏïÑÏù¥ÌÖú Ïπ¥Îìú
struct ItemCard: View {
    let item: StoreItem
    
    var body: some View {
        VStack {
            Image(systemName: item.iconName)
                .font(.system(size: 40))
                .foregroundColor(.white)
                .frame(width: 80, height: 80)
                .background(Color.gray.opacity(0.3))
                .cornerRadius(12)
            
            Text(item.name)
                .font(.caption)
                .foregroundColor(.white)
                .lineLimit(1)
        }
        .frame(width: 100)
    }
}

// MARK: - Additional Views

// ÏïåÎ¶º ÏÑ§Ï†ï Î∑∞
struct NotificationSettingsView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var settings = NotificationSettings()
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("ÏïåÎ¶º Ïú†Ìòï")) {
                    Toggle("ÏπúÍµ¨ ÏöîÏ≤≠", isOn: $settings.friendRequestsEnabled)
                    Toggle("Î©îÏãúÏßÄ", isOn: $settings.messagesEnabled)
                    Toggle("ÌÜµÌôî", isOn: $settings.callsEnabled)
                    Toggle("ÏÑ†Î¨º", isOn: $settings.giftsEnabled)
                }
                
                Section(header: Text("ÏïåÎ¶º ÏãúÍ∞Ñ")) {
                    Toggle("Î∞©Ìï¥ Í∏àÏßÄ Î™®Îìú", isOn: $settings.doNotDisturb)
                    if settings.doNotDisturb {
                        DatePicker("ÏãúÏûë ÏãúÍ∞Ñ", selection: $settings.quietHoursStart, displayedComponents: .hourAndMinute)
                        DatePicker("Ï¢ÖÎ£å ÏãúÍ∞Ñ", selection: $settings.quietHoursEnd, displayedComponents: .hourAndMinute)
                    }
                }
            }
            .navigationTitle("ÏïåÎ¶º ÏÑ§Ï†ï")
            .navigationBarItems(trailing: Button("ÏôÑÎ£å") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
}

// ÌîÑÎùºÏù¥Î≤ÑÏãú ÏÑ§Ï†ï Î∑∞
struct PrivacySettingsView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var settings = PrivacySettings()
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("ÌîÑÎ°úÌïÑ Í≥µÍ∞ú")) {
                    Toggle("ÌîÑÎ°úÌïÑ Í≥µÍ∞ú", isOn: $settings.profilePublic)
                    Toggle("Ïò®ÎùºÏù∏ ÏÉÅÌÉú ÌëúÏãú", isOn: $settings.showOnlineStatus)
                    Toggle("ÎßàÏßÄÎßâ Ï†ëÏÜç ÏãúÍ∞Ñ ÌëúÏãú", isOn: $settings.showLastSeen)
                }
                
                Section(header: Text("Ï∞®Îã® Í¥ÄÎ¶¨")) {
                    NavigationLink(destination: BlockedUsersView()) {
                        HStack {
                            Text("Ï∞®Îã®Ìïú ÏÇ¨Ïö©Ïûê")
                            Spacer()
                            Text("0Î™Ö")
                                .foregroundColor(.gray)
                        }
                    }
                }
            }
            .navigationTitle("ÌîÑÎùºÏù¥Î≤ÑÏãú")
            .navigationBarItems(trailing: Button("ÏôÑÎ£å") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
}

// ÎèÑÏõÄÎßê ÏÑºÌÑ∞ Î∑∞
struct HelpCenterView: View {
    @Environment(\.presentationMode) var presentationMode
    
    let helpTopics = [
        ("ÏãúÏûëÌïòÍ∏∞", "Ïï± ÏÇ¨Ïö©Î≤ïÍ≥º Í∏∞Î≥∏ Í∏∞Îä•"),
        ("Í≥ÑÏ†ï Î∞è ÌîÑÎ°úÌïÑ", "Í≥ÑÏ†ï Í¥ÄÎ¶¨ÏôÄ ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï"),
        ("ÏπúÍµ¨ Î∞è Î©îÏãúÏßÄ", "ÏπúÍµ¨ Ï∂îÍ∞ÄÏôÄ Ï±ÑÌåÖ Í∏∞Îä•"),
        ("ÌôîÏÉÅ ÌÜµÌôî", "ÌôîÏÉÅ ÌÜµÌôî ÏÇ¨Ïö© Î∞©Î≤ï"),
        ("Í≤∞Ï†ú Î∞è ÌôòÎ∂à", "Î≥¥ÏÑù Íµ¨Îß§ÏôÄ ÌôòÎ∂à Ï†ïÏ±Ö"),
        ("Î¨∏Ï†ú Ìï¥Í≤∞", "ÏùºÎ∞òÏ†ÅÏù∏ Î¨∏Ï†úÏôÄ Ìï¥Í≤∞ Î∞©Î≤ï")
    ]
    
    var body: some View {
        NavigationView {
            List(helpTopics, id: \.0) { topic in
                NavigationLink(destination: HelpDetailView(title: topic.0)) {
                    VStack(alignment: .leading, spacing: 4) {
                        Text(topic.0)
                            .font(.headline)
                        Text(topic.1)
                            .font(.caption)
                            .foregroundColor(.gray)
                    }
                    .padding(.vertical, 4)
                }
            }
            .navigationTitle("ÎèÑÏõÄÎßê")
            .navigationBarItems(trailing: Button("ÏôÑÎ£å") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
}

// Î¨∏ÏùòÌïòÍ∏∞ Î∑∞
struct ContactUsView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var subject = ""
    @State private var message = ""
    @State private var email = ""
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Î¨∏Ïùò Ï†ïÎ≥¥")) {
                    TextField("Ïù¥Î©îÏùº", text: $email)
                        .keyboardType(.emailAddress)
                    TextField("Ï†úÎ™©", text: $subject)
                    TextEditor(text: $message)
                        .frame(minHeight: 150)
                }
                
                Section {
                    Button("Î¨∏Ïùò Î≥¥ÎÇ¥Í∏∞") {
                        // Send inquiry
                        presentationMode.wrappedValue.dismiss()
                    }
                    .disabled(subject.isEmpty || message.isEmpty || email.isEmpty)
                }
            }
            .navigationTitle("Î¨∏ÏùòÌïòÍ∏∞")
            .navigationBarItems(
                leading: Button("Ï∑®ÏÜå") {
                    presentationMode.wrappedValue.dismiss()
                },
                trailing: Button("Î≥¥ÎÇ¥Í∏∞") {
                    // Send inquiry
                    presentationMode.wrappedValue.dismiss()
                }
                .disabled(subject.isEmpty || message.isEmpty || email.isEmpty)
            )
        }
    }
}

// Ïù¥Ïö©ÏïΩÍ¥Ä Î∑∞
struct TermsOfServiceView: View {
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 16) {
                    Text("Ïù¥Ïö©ÏïΩÍ¥Ä")
                        .font(.largeTitle)
                        .bold()
                    
                    Text("ÏµúÏ¢Ö ÏàòÏ†ïÏùº: 2024ÎÖÑ 1Ïõî 1Ïùº")
                        .font(.caption)
                        .foregroundColor(.gray)
                    
                    // Terms content here
                    Text("""
                    1. ÏÑúÎπÑÏä§ Ïù¥Ïö©
                    - Î≥∏ ÏÑúÎπÑÏä§Îäî Îßå 18ÏÑ∏ Ïù¥ÏÉÅÎßå Ïù¥Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                    - Ïù¥Ïö©ÏûêÎäî Í¥ÄÎ†® Î≤ïÎ†πÏùÑ Ï§ÄÏàòÌï¥Ïïº Ìï©ÎãàÎã§.
                    
                    2. Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏
                    - Í∞úÏù∏Ï†ïÎ≥¥Îäî ÏïàÏ†ÑÌïòÍ≤å Î≥¥Ìò∏Îê©ÎãàÎã§.
                    - Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®Ïóê Îî∞Îùº Ï≤òÎ¶¨Îê©ÎãàÎã§.
                    
                    3. ÏΩòÌÖêÏ∏† Ï†ïÏ±Ö
                    - Î∂àÎ≤ïÏ†ÅÏù¥Í±∞ÎÇò Ïú†Ìï¥Ìïú ÏΩòÌÖêÏ∏†Îäî Í∏àÏßÄÎê©ÎãàÎã§.
                    - Îã§Î•∏ ÏÇ¨Ïö©ÏûêÏùò Í∂åÎ¶¨Î•º Ïπ®Ìï¥ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
                    
                    4. ÏÑúÎπÑÏä§ Ïù¥Ïö© Ï†úÌïú
                    - ÏïΩÍ¥Ä ÏúÑÎ∞ò Ïãú ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.
                    - Í≥ÑÏ†ïÏù¥ Ï†ïÏßÄÎêòÍ±∞ÎÇò ÏÇ≠Ï†úÎê† Ïàò ÏûàÏäµÎãàÎã§.
                    """)
                }
                .padding()
            }
            .navigationTitle("Ïù¥Ïö©ÏïΩÍ¥Ä")
            .navigationBarItems(trailing: Button("Îã´Í∏∞") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
}

// ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Î∑∞
struct PasswordChangeView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var currentPassword = ""
    @State private var newPassword = ""
    @State private var confirmPassword = ""
    @State private var showAlert = false
    @State private var alertMessage = ""
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("ÌòÑÏû¨ ÎπÑÎ∞ÄÎ≤àÌò∏")) {
                    SecureField("ÌòÑÏû¨ ÎπÑÎ∞ÄÎ≤àÌò∏", text: $currentPassword)
                }
                
                Section(header: Text("ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏")) {
                    SecureField("ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏", text: $newPassword)
                    SecureField("ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏", text: $confirmPassword)
                }
                
                Section {
                    Text("ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 8Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.")
                        .font(.caption)
                        .foregroundColor(.gray)
                }
            }
            .navigationTitle("ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω")
            .navigationBarItems(
                leading: Button("Ï∑®ÏÜå") {
                    presentationMode.wrappedValue.dismiss()
                },
                trailing: Button("Ï†ÄÏû•") {
                    changePassword()
                }
                .disabled(currentPassword.isEmpty || newPassword.isEmpty || confirmPassword.isEmpty)
            )
            .alert(isPresented: $showAlert) {
                Alert(title: Text("ÏïåÎ¶º"), message: Text(alertMessage), dismissButton: .default(Text("ÌôïÏù∏")))
            }
        }
    }
    
    func changePassword() {
        guard newPassword == confirmPassword else {
            alertMessage = "ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§."
            showAlert = true
            return
        }
        
        guard newPassword.count >= 8 else {
            alertMessage = "ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 8Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§."
            showAlert = true
            return
        }
        
        // TODO: Implement password change API call
        alertMessage = "ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§."
        showAlert = true
        presentationMode.wrappedValue.dismiss()
    }
}

// 2Îã®Í≥Ñ Ïù∏Ï¶ù ÏÑ§Ï†ï Î∑∞
struct TwoFactorSettingsView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var isEnabled = false
    @State private var phoneNumber = ""
    @State private var verificationCode = ""
    @State private var showVerification = false
    
    var body: some View {
        NavigationView {
            Form {
                Section {
                    Toggle("2Îã®Í≥Ñ Ïù∏Ï¶ù ÏÇ¨Ïö©", isOn: $isEnabled)
                }
                
                if isEnabled {
                    Section(header: Text("Ï†ÑÌôîÎ≤àÌò∏")) {
                        TextField("Ï†ÑÌôîÎ≤àÌò∏", text: $phoneNumber)
                            .keyboardType(.phonePad)
                        
                        Button("Ïù∏Ï¶ùÎ≤àÌò∏ Î∞õÍ∏∞") {
                            // Send verification code
                            showVerification = true
                        }
                        .disabled(phoneNumber.isEmpty)
                    }
                    
                    if showVerification {
                        Section(header: Text("Ïù∏Ï¶ùÎ≤àÌò∏")) {
                            TextField("Ïù∏Ï¶ùÎ≤àÌò∏", text: $verificationCode)
                                .keyboardType(.numberPad)
                            
                            Button("ÌôïÏù∏") {
                                // Verify code
                                presentationMode.wrappedValue.dismiss()
                            }
                            .disabled(verificationCode.isEmpty)
                        }
                    }
                }
            }
            .navigationTitle("2Îã®Í≥Ñ Ïù∏Ï¶ù")
            .navigationBarItems(trailing: Button("ÏôÑÎ£å") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
}

// Ï∞®Îã®Îêú ÏÇ¨Ïö©Ïûê Î∑∞
struct BlockedUsersView: View {
    @State private var blockedUsers: [String] = []
    
    var body: some View {
        List {
            if blockedUsers.isEmpty {
                Text("Ï∞®Îã®Ìïú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§.")
                    .foregroundColor(.gray)
                    .frame(maxWidth: .infinity, alignment: .center)
                    .padding()
            } else {
                ForEach(blockedUsers, id: \.self) { user in
                    HStack {
                        Text(user)
                        Spacer()
                        Button("Ï∞®Îã® Ìï¥Ï†ú") {
                            // Unblock user
                        }
                        .foregroundColor(.red)
                    }
                }
            }
        }
        .navigationTitle("Ï∞®Îã® Í¥ÄÎ¶¨")
    }
}

// ÎèÑÏõÄÎßê ÏÉÅÏÑ∏ Î∑∞
struct HelpDetailView: View {
    let title: String
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                Text(title)
                    .font(.largeTitle)
                    .bold()
                
                // Help content based on title
                Text(getHelpContent(for: title))
                    .font(.body)
                    .padding(.top)
            }
            .padding()
        }
        .navigationTitle("")
        .navigationBarTitleDisplayMode(.inline)
    }
    
    func getHelpContent(for title: String) -> String {
        switch title {
        case "ÏãúÏûëÌïòÍ∏∞":
            return """
            Ïï±ÏùÑ Ï≤òÏùå ÏÇ¨Ïö©ÌïòÏãúÎäî Í≤ΩÏö∞:
            
            1. ÌöåÏõêÍ∞ÄÏûÖ ÎòêÎäî Î°úÍ∑∏Ïù∏
            2. ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï
            3. ÏπúÍµ¨ Ï∂îÍ∞Ä
            4. Ï±ÑÌåÖ ÏãúÏûë
            5. ÌôîÏÉÅ ÌÜµÌôî Ï¶êÍ∏∞Í∏∞
            """
        case "Í≥ÑÏ†ï Î∞è ÌîÑÎ°úÌïÑ":
            return """
            Í≥ÑÏ†ï Í¥ÄÎ¶¨:
            
            - ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Î≥ÄÍ≤Ω
            - Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏ†ï
            - ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
            - Í≥ÑÏ†ï ÏÇ≠Ï†ú
            """
        default:
            return "ÏÉÅÏÑ∏ ÎèÑÏõÄÎßê ÎÇ¥Ïö©"
        }
    }
}

// MARK: - Models

struct NotificationSettings {
    var pushEnabled = true
    var friendRequestsEnabled = true
    var messagesEnabled = true
    var callsEnabled = true
    var giftsEnabled = true
    var doNotDisturb = false
    var quietHoursStart = Date()
    var quietHoursEnd = Date()
}

struct PrivacySettings {
    var profilePublic = true
    var showOnlineStatus = true
    var showLastSeen = true
    var showReadReceipts = true
    var shareLocation = false
    var twoFactorEnabled = false
}

