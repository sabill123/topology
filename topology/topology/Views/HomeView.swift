import SwiftUI
import AVFoundation

struct HomeView: View {
    @State private var isFilterViewPresented = false
    @State private var currentFilter: String? = nil
    @State private var showLocationOption = false
    @State private var showGenderOption = false
    @State private var isCameraOn = true
    @State private var isMicOn = true
    @State private var isFlipped = false
    @State private var showRandomCallAlert = false
    @State private var showLocationPicker = false
    @State private var showGenderPicker = false
    @State private var selectedLocation = "ÏÑúÏö∏"
    @State private var selectedGender = "Î™®Îëê"
    @State private var isConnecting = false
    @State private var isChatting = false
    @State private var currentChatPartner: Friend? = nil
    
    // Ïπ¥Î©îÎùº Í¥ÄÎ†® ÏÉÅÌÉú
    @State private var cameraAccess = true
    
    var body: some View {
        NavigationView {
            ZStack {
                // Ïπ¥Î©îÎùº Î∑∞ (Ïã§Ï†ú Ïï±ÏóêÏÑúÎäî AVCaptureSessionÏùÑ ÏÇ¨Ïö©Ìï¥Ïïº Ìï®)
                if isChatting, let partner = currentChatPartner {
                    VideoCallSessionView(
                        partner: partner,
                        isCameraOn: $isCameraOn,
                        isMicOn: $isMicOn,
                        isFlipped: $isFlipped,
                        onDisconnect: {
                            isChatting = false
                            currentChatPartner = nil
                        }
                    )
                } else {
                    CameraPreviewView(isCameraOn: isCameraOn)
                        .edgesIgnoringSafeArea(.all)
                }
                
                if isConnecting {
                    ConnectingView {
                        isConnecting = false
                        // ÎûúÎç§ ÏÉÅÎåÄÎ•º Ï∞æÏúºÎ©¥ Ï±ÑÌåÖ ÏãúÏûë
                        let randomFriend = generateRandomFriend()
                        currentChatPartner = randomFriend
                        isChatting = true
                    }
                }
                
                if !isChatting {
                    // ÏÉÅÎã® Ïï± Î∞î
                    VStack {
                        HStack {
                            Button(action: {
                                // ÏïåÎ¶º
                            }) {
                                Image(systemName: "bell.fill")
                                    .foregroundColor(.white)
                                    .padding(10)
                                    .background(Color.black.opacity(0.5))
                                    .clipShape(Circle())
                            }
                            
                            Spacer()
                            
                            // Ìè¨Ïù∏Ìä∏ ÌëúÏãú
                            HStack(spacing: 4) {
                                Text("1,595")
                                    .font(.system(size: 14, weight: .bold))
                                Image(systemName: "diamond.fill")
                                    .foregroundColor(.yellow)
                            }
                            .padding(.horizontal, 12)
                            .padding(.vertical, 6)
                            .background(Color.black.opacity(0.7))
                            .cornerRadius(20)
                            
                            // Plus Î≤ÑÌäº
                            NavigationLink(destination: GemStoreView(viewModel: FriendsViewModel())) {
                                HStack {
                                    Text("Plus")
                                        .font(.system(size: 14, weight: .bold))
                                        .italic()
                                    Image(systemName: "plus.circle.fill")
                                        .foregroundColor(.green)
                                }
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(Color.black.opacity(0.7))
                                .cornerRadius(20)
                            }
                            
                            Spacer()
                            
                            // ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
                            NavigationLink(destination: ProfileView()) {
                                Circle()
                                    .fill(Color.gray)
                                    .frame(width: 36, height: 36)
                                    .overlay(
                                        Text("üë§")
                                            .font(.system(size: 18))
                                    )
                            }
                        }
                        .padding(.horizontal)
                        .padding(.top, 8)
                        
                        Spacer()
                        
                        // ÏôºÏ™Ω ÏÇ¨Ïù¥Îìú Î≤ÑÌäºÎì§
                        VStack(spacing: 20) {
                            Button(action: {
                                isFilterViewPresented = true
                            }) {
                                Image(systemName: "wand.and.stars")
                                    .font(.system(size: 22))
                                    .foregroundColor(.white)
                                    .frame(width: 44, height: 44)
                                    .background(Color.black.opacity(0.5))
                                    .clipShape(Circle())
                            }
                            
                            Button(action: {
                                isFlipped.toggle()
                            }) {
                                Image(systemName: "arrow.triangle.2.circlepath")
                                    .font(.system(size: 22))
                                    .foregroundColor(.white)
                                    .frame(width: 44, height: 44)
                                    .background(Color.black.opacity(0.5))
                                    .clipShape(Circle())
                            }
                            
                            Button(action: {
                                // ÏÉàÎ°úÍ≥†Ïπ®
                            }) {
                                Image(systemName: "arrow.clockwise")
                                    .font(.system(size: 22))
                                    .foregroundColor(.white)
                                    .frame(width: 44, height: 44)
                                    .background(Color.black.opacity(0.5))
                                    .clipShape(Circle())
                            }
                        }
                        .padding()
                        .offset(x: -UIScreen.main.bounds.width/2 + 50)
                        
                        Spacer()
                        
                        // ÌïòÎã® ÏòµÏÖò Î≤ÑÌäºÎì§
                        VStack(spacing: 12) {
                            // ÌôîÏÉÅ Ï±ÑÌåÖ ÏãúÏûë Î≤ÑÌäº
                            Button(action: {
                                if cameraAccess {
                                    showRandomCallAlert = true
                                }
                            }) {
                                HStack {
                                    Text("ÌôîÏÉÅÏ±ÑÌåÖ ÏãúÏûëÌïòÍ∏∞")
                                        .font(.system(size: 16, weight: .bold))
                                    Image(systemName: "hand.point.right.fill")
                                }
                                .foregroundColor(.white)
                                .padding(.horizontal, 20)
                                .padding(.vertical, 12)
                                .background(Color.green)
                                .cornerRadius(30)
                            }
                            
                            HStack(spacing: 0) {
                                // ÏúÑÏπò ÏÑ†ÌÉù Î≤ÑÌäº
                                Button(action: {
                                    showLocationPicker = true
                                }) {
                                    HStack {
                                        Image(systemName: "location.fill")
                                            .foregroundColor(.green)
                                        Text(selectedLocation)
                                            .foregroundColor(.white)
                                        Image(systemName: "chevron.up")
                                            .font(.system(size: 12))
                                            .foregroundColor(.gray)
                                            .rotationEffect(showLocationPicker ? .degrees(180) : .degrees(0))
                                    }
                                    .padding(.horizontal, 16)
                                    .padding(.vertical, 10)
                                    .background(Color.black.opacity(0.7))
                                    .cornerRadius(20)
                                }
                                
                                Spacer()
                                
                                // ÏÑ±Î≥Ñ ÏÑ†ÌÉù Î≤ÑÌäº
                                Button(action: {
                                    showGenderPicker = true
                                }) {
                                    HStack {
                                        Image(systemName: "person.fill")
                                            .foregroundColor(.pink)
                                        Image(systemName: "person.fill")
                                            .foregroundColor(.blue)
                                        Text(selectedGender)
                                            .foregroundColor(.white)
                                        Image(systemName: "chevron.up")
                                            .font(.system(size: 12))
                                            .foregroundColor(.gray)
                                            .rotationEffect(showGenderPicker ? .degrees(180) : .degrees(0))
                                    }
                                    .padding(.horizontal, 16)
                                    .padding(.vertical, 10)
                                    .background(Color.black.opacity(0.7))
                                    .cornerRadius(20)
                                }
                            }
                            .padding(.horizontal)
                        }
                        .padding(.bottom, 16)
                    }
                }
            }
            .sheet(isPresented: $isFilterViewPresented) {
                FilterView(currentFilter: $currentFilter)
            }
            .sheet(isPresented: $showLocationPicker) {
                LocationPickerView(selectedLocation: $selectedLocation)
            }
            .sheet(isPresented: $showGenderPicker) {
                GenderPickerView(selectedGender: $selectedGender)
            }
            .alert(isPresented: $showRandomCallAlert) {
                Alert(
                    title: Text("ÎûúÎç§ ÌôîÏÉÅÌÜµÌôî"),
                    message: Text("Ï†Ñ ÏÑ∏Í≥Ñ ÏÇ¨Ïö©ÏûêÏôÄ ÎûúÎç§ÏúºÎ°ú Ïó∞Í≤∞Îê©ÎãàÎã§. Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?"),
                    primaryButton: .default(Text("ÏãúÏûëÌïòÍ∏∞")) {
                        startRandomCall()
                    },
                    secondaryButton: .cancel(Text("Ï∑®ÏÜå"))
                )
            }
            .navigationBarHidden(true)
        }
    }
    
    // ÎûúÎç§ ÌÜµÌôî ÏãúÏûë Ìï®Ïàò
    func startRandomCall() {
        isConnecting = true
    }
    
    // ÌÖåÏä§Ìä∏Ïö© ÎûúÎç§ ÏπúÍµ¨ ÏÉùÏÑ± Ìï®Ïàò
    func generateRandomFriend() -> Friend {
        let names = ["ÏÜåÌîºÏïÑ", "Ïû¨ÌÅ¥Î¶∞", "ÏïåÎ†âÏä§", "ÌïòÎ£®Ïπ¥", "ÎßàÎ¶¨ÏïÑ", "ÏïÑÎØ∏Î•¥"]
        let countries = ["ÎØ∏Íµ≠", "ÏòÅÍµ≠", "ÏùºÎ≥∏", "ÌïúÍµ≠", "Îü¨ÏãúÏïÑ", "ÌîÑÎûëÏä§"]
        let randomName = names.randomElement() ?? "ÏÇ¨Ïö©Ïûê"
        let randomCountry = countries.randomElement() ?? "ÎØ∏Íµ≠"
        return Friend(
            name: randomName,
            profileImage: "person.fill",
            age: Int.random(in: 20...35),
            country: randomCountry,
            isOnline: true,
            lastSeen: "Î∞©Í∏à Ï†Ñ"
        )
    }
}